import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
export var hexValueType = function hexValueType(input) {
  return input;
};
export var isHexValue = function isHexValue(value) {
  return typeof value === 'string' && value.slice(0, 2) === '0x';
};
export var fromHexValue = function fromHexValue(input) {
  return Buffer.from(input.substr(2), 'hex');
};

var toHexValue = function toHexValue(value) {
  return hexValueType('0x' + Buffer.from(value).toString('hex'));
};

export var Hex =
/*#__PURE__*/
function () {
  function Hex(inputValue) {
    _defineProperty(this, "_input", void 0);

    _defineProperty(this, "_value", void 0);

    if (inputValue instanceof Hex) {
      return inputValue;
    }

    if (isHexValue(inputValue)) {
      var value = hexValueType(inputValue);
      this._input = {
        type: 'hex',
        value: value
      };
      this._value = value;
    } else {
      if (typeof inputValue === 'string') {
        this._input = {
          type: 'string',
          value: inputValue
        };
        this._value = toHexValue(inputValue);
      } else if (Array.isArray(inputValue)) {
        this._input = {
          type: 'bytesArray',
          value: inputValue
        };
        this._value = toHexValue(inputValue);
      } else if (Buffer.isBuffer(inputValue)) {
        this._input = {
          type: 'buffer',
          value: inputValue
        };
        this._value = toHexValue(inputValue);
      } else if (typeof inputValue === 'object') {
        this._input = {
          type: 'object',
          value: inputValue
        };
        this._value = toHexValue(JSON.stringify(inputValue));
      } else {
        throw new Error('Invalid input');
      }
    }
  }

  var _proto = Hex.prototype;

  _proto.equals = function equals(other) {
    return new Hex(other).value === this._value;
  };

  _proto.toBuffer = function toBuffer() {
    switch (this._input.type) {
      case 'buffer':
        return this._input.value;

      case 'bytesArray':
      case 'string':
        return Buffer.from(this._input.value);

      case 'hex':
        return fromHexValue(this._input.value);

      case 'object':
        return Buffer.from(JSON.stringify(this._input.value));

      default:
        return Buffer.alloc(0);
    }
  };

  _proto.toBytesArray = function toBytesArray() {
    return this._input.type === 'bytesArray' ? this._input.value : Array.from(this.toBuffer());
  };

  _proto.toObject = function toObject() {
    return this._input.type === 'object' ? this._input.value : JSON.parse(this.toString());
  };

  _proto.toString = function toString() {
    switch (this._input.type) {
      case 'buffer':
        return this._input.value.toString();

      case 'bytesArray':
        return Buffer.from(this._input.value).toString();

      case 'hex':
        return fromHexValue(this._input.value).toString();

      case 'object':
        return JSON.stringify(this._input.value);

      case 'string':
        return this._input.value;

      default:
        return '';
    }
  };

  _createClass(Hex, [{
    key: "value",
    get: function get() {
      return this._value;
    }
  }]);

  return Hex;
}();
export default (function (input) {
  return new Hex(input);
});