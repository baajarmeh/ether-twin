import createHex, { hexValueType } from '@erebos/hex';
import { hash } from '@erebos/keccak256';
var FEED_TOPIC_LENGTH = 32;
var FEED_USER_LENGTH = 20;
var FEED_TIME_LENGTH = 7;
var FEED_LEVEL_LENGTH = 1;
var FEED_HEADER_LENGTH = 8;
export var bytesToHexValue = function bytesToHexValue(bytes) {
  return hexValueType('0x' + Buffer.from(bytes).toString('hex'));
};
export var createFeedDigest = function createFeedDigest(meta, data) {
  var topicBuffer = createHex(meta.feed.topic).toBuffer();

  if (topicBuffer.length !== FEED_TOPIC_LENGTH) {
    throw new Error('Invalid topic length');
  }

  var userBuffer = createHex(meta.feed.user).toBuffer();

  if (userBuffer.length !== FEED_USER_LENGTH) {
    throw new Error('Invalid user length');
  }

  var headerBuffer = Buffer.alloc(FEED_HEADER_LENGTH, 0);
  headerBuffer.writeInt8(meta.protocolVersion, 0);
  var timeBuffer = Buffer.alloc(FEED_TIME_LENGTH, 0);
  timeBuffer.writeUInt32LE(meta.epoch.time, 0);
  var levelBuffer = Buffer.alloc(FEED_LEVEL_LENGTH, 0);
  levelBuffer.writeUInt8(meta.epoch.level, 0);
  var payload = Buffer.concat([headerBuffer, topicBuffer, userBuffer, timeBuffer, levelBuffer, createHex(data).toBuffer()]);
  return hash(payload);
};
export var getFeedTopic = function getFeedTopic(params) {
  var topicHex = createHex(params.topic || Buffer.alloc(FEED_TOPIC_LENGTH));

  if (params.name == null) {
    return topicHex.value;
  }

  var name = Buffer.from(params.name);
  var topic = topicHex.toBuffer();
  var bytes = Array(FEED_TOPIC_LENGTH).fill().map(function (_, i) {
    return topic[i] ^ name[i];
  });
  return bytesToHexValue(bytes);
};