import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import _wrapNativeSuper from "@babel/runtime/helpers/esm/wrapNativeSuper";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

var _ERROR_MESSAGE;

export var ERROR_CODE;

(function (ERROR_CODE) {
  ERROR_CODE[ERROR_CODE["PARSE_ERROR"] = -32700] = "PARSE_ERROR";
  ERROR_CODE[ERROR_CODE["INVALID_REQUEST"] = -32600] = "INVALID_REQUEST";
  ERROR_CODE[ERROR_CODE["METHOD_NOT_FOUND"] = -32601] = "METHOD_NOT_FOUND";
  ERROR_CODE[ERROR_CODE["INVALID_PARAMS"] = -32602] = "INVALID_PARAMS";
  ERROR_CODE[ERROR_CODE["INTERNAL_ERROR"] = -32603] = "INTERNAL_ERROR";
})(ERROR_CODE || (ERROR_CODE = {}));

export var ERROR_MESSAGE = (_ERROR_MESSAGE = {}, _ERROR_MESSAGE[ERROR_CODE.PARSE_ERROR] = 'Parse error', _ERROR_MESSAGE[ERROR_CODE.INVALID_REQUEST] = 'Invalid request', _ERROR_MESSAGE[ERROR_CODE.METHOD_NOT_FOUND] = 'Method not found', _ERROR_MESSAGE[ERROR_CODE.INVALID_PARAMS] = 'Invalid params', _ERROR_MESSAGE[ERROR_CODE.INTERNAL_ERROR] = 'Internal error', _ERROR_MESSAGE);
export function isServerError(code) {
  return -32000 >= code && code >= -32099;
}
export function getErrorMessage(code) {
  return ERROR_MESSAGE[code] || (isServerError(code) ? 'Server error' : 'Application error');
}

var RPCError =
/*#__PURE__*/
function (_Error) {
  _inheritsLoose(RPCError, _Error);

  RPCError.fromObject = function fromObject(err) {
    return new RPCError(err.code, err.message, err.data);
  };

  function RPCError(code, message, data) {
    var _this;

    _this = _Error.call(this) || this;

    _defineProperty(_assertThisInitialized(_this), "code", void 0);

    _defineProperty(_assertThisInitialized(_this), "data", void 0);

    _defineProperty(_assertThisInitialized(_this), "message", void 0);

    _this.code = code;
    _this.data = data;
    _this.message = message || getErrorMessage(code);
    return _this;
  }

  var _proto = RPCError.prototype;

  _proto.toObject = function toObject() {
    return {
      code: this.code,
      data: this.data,
      message: this.message
    };
  };

  return RPCError;
}(_wrapNativeSuper(Error));

export { RPCError as default };

function createErrorFactory(code) {
  var message = ERROR_MESSAGE[code];
  return function createError(data) {
    return new RPCError(code, message, data);
  };
}

export var parseError = createErrorFactory(ERROR_CODE.PARSE_ERROR);
export var invalidRequest = createErrorFactory(ERROR_CODE.INVALID_REQUEST);
export var methodNotFound = createErrorFactory(ERROR_CODE.METHOD_NOT_FOUND);
export var invalidParams = createErrorFactory(ERROR_CODE.INVALID_PARAMS);
export var internalError = createErrorFactory(ERROR_CODE.INTERNAL_ERROR);